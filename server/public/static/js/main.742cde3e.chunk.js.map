{"version":3,"sources":["components/Die.tsx","components/DiceBoard.tsx","components/Loader.tsx","components/Main.tsx","components/Anchor.tsx","components/Footer.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Die","props","value","isFrozen","handleClick","handleAnimationEnd","faces","Array","fill","map","_","index","faceValue","id","className","onClick","nanoid","onAnimationEnd","rolling","DiceBoard","ready","opponent","dieStates","handleFreeze","dice","dieState","e","Loader","el","Main","state","defaultState","bind","handleRoll","checkDone","reset","socket","this","on","emit","diceBoard","initState","oppReady","setState","prevState","oppState","opponentBoard","console","log","completed","noOfDice","Math","ceil","random","preventDefault","newDieStates","every","myDieStates","myGameFinished","oppDieStates","oppGameFinished","lossPopup","open","currentTarget","removeAttribute","gameButton","React","Component","Anchor","target","rel","Footer","style","textAlign","listStyle","href","icon","library","add","fab","io","App","useEffect","reason","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.742cde3e.chunk.js","sourcesContent":["import React, { AnimationEventHandler, SyntheticEvent } from 'react'\nimport { nanoid } from 'nanoid'\nimport '../style/die.css'\n\ntype MyProps = {\n    ready: boolean\n    rolling: boolean\n    value: number\n    isFrozen: boolean\n    handleClick: (event: SyntheticEvent) => void\n    handleAnimationEnd: AnimationEventHandler<HTMLDivElement>\n}\n\n/**\n *\n * @param {MyProps} props of the die.\n * @returns A Die element.\n */\nexport default function Die(props: MyProps) {\n    const { value, isFrozen, handleClick, handleAnimationEnd } = props\n\n    const faces = new Array<JSX.Element>(6)\n        .fill(<div></div>)\n        .map((_, index) => {\n            const faceValue = ((value + index - 1) % 6) + 1\n            return (\n                <div\n                    key={nanoid()}\n                    id={`face-${index + 1}`}\n                    className={`cool-button die-face`}\n                    onClick={handleClick}\n                >\n                    {faceValue}\n                </div>\n            )\n        })\n\n    return (\n        <div\n            className={`cube ${isFrozen ? 'frozen' : ''}`}\n            onAnimationEnd={handleAnimationEnd}\n            data-rolling={props.rolling && !isFrozen ? 'true' : 'false'}\n        >\n            {faces}\n        </div>\n    )\n}\n","import { AnimationEventHandler, SyntheticEvent } from 'react'\nimport { DieState } from '../states/ComponentState'\nimport Die from './Die'\nimport '../style/diceboard.css'\n\ntype MyProps = {\n    ready: boolean\n    opponent: boolean\n    rolling: boolean\n    dieStates: DieState[]\n    handleFreeze: (e: SyntheticEvent, id: string) => void\n    handleAnimationEnd: AnimationEventHandler<HTMLDivElement>\n}\n\n/**\n *\n * @param {MyProps} props of the diceboard,\n * a lot of which is passed down to each individual die.\n * @returns a diceboard layout.\n */\nexport default function DiceBoard(props: MyProps) {\n    const { ready, rolling, opponent, dieStates, handleFreeze } = props\n\n    const dice = dieStates.map((dieState) => {\n        return (\n            <Die\n                key={dieState.id}\n                ready={ready}\n                rolling={rolling}\n                value={dieState.value}\n                isFrozen={dieState.isFrozen}\n                handleClick={\n                    !opponent && ready\n                        ? (e) => handleFreeze(e, dieState.id)\n                        : () => {}\n                }\n                handleAnimationEnd={\n                    !opponent ? props.handleAnimationEnd : () => {}\n                }\n            />\n        )\n    })\n\n    return (\n        <div\n            className={`dice-board ${\n                opponent ? 'opponent-board opacity-50' : ''\n            }`}\n        >\n            {dice}\n        </div>\n    )\n}\n","import { nanoid } from 'nanoid'\nimport '../style/loader.css'\n\n/**\n *\n * @returns A loader element.\n */\nexport default function Loader() {\n    const loaderLine = (id: string) => (\n        <div key={id} className=\"loader-line-wrap\">\n            <div className=\"loader-line\"></div>\n        </div>\n    )\n    return (\n        <div className=\"loader-inner m-auto\">\n            {new Array<JSX.Element>(5)\n                .fill(<div></div>)\n                .map((el) => loaderLine(nanoid()))}\n        </div>\n    )\n}\n","import { nanoid } from 'nanoid'\nimport React, { SyntheticEvent } from 'react'\nimport Confetti from 'react-confetti'\nimport { DieState } from '../states/ComponentState'\nimport '../style/main.css'\nimport DiceBoard from './DiceBoard'\nimport Loader from './Loader'\n\n/**\n * Properties of Main\n */\ntype MainProps = {\n    noOfDice: number\n    socket: any\n}\n\n/**\n * Representation of state of a Diceboard\n */\ntype DiceBoardState = {\n    dieStates: DieState[]\n    completed: boolean\n    rolling: boolean\n}\n\n/**\n * Main consists of two diceboards for player and opponent,\n * and a boolean for whether the opponent is ready to play (i.e. whether palyer has gotten opponent)\n */\ntype MainState = {\n    diceBoard: DiceBoardState\n    oppState: DiceBoardState\n    oppReady: boolean\n}\n\n/**\n * Main Class of the app.\n */\nexport default class Main extends React.Component<MainProps, MainState> {\n    constructor(props: MainProps) {\n        super(props)\n\n        this.state = this.defaultState(props)\n\n        this.handleFreeze = this.handleFreeze.bind(this)\n        this.handleRoll = this.handleRoll.bind(this)\n        this.handleAnimationEnd = this.handleAnimationEnd.bind(this)\n        this.checkDone = this.checkDone.bind(this)\n        this.reset = this.reset.bind(this)\n    }\n\n    /**\n     * Run code after render\n     */\n    componentDidMount() {\n        const { socket } = this.props\n\n        socket.on('player_joined', () => {\n            socket.emit('send_init_state', this.state.diceBoard)\n        })\n\n        /**\n         * When receiving opponent's initial state, set readiness to true,\n         * and respond with player initial state. This way we do not need to care\n         * who got in the room first.\n         */\n        socket.on('receive_init_state', (initState: DiceBoardState) => {\n            if (!this.state.oppReady) {\n                this.setState((prevState) => {\n                    return {\n                        ...prevState,\n                        oppReady: true,\n                        oppState: initState,\n                    }\n                })\n\n                socket.emit('send_init_state', this.state.diceBoard)\n            }\n        })\n\n        socket.on('receive_move', (opponentBoard: DiceBoardState) => {\n            this.setState(\n                (prevState) => {\n                    return {\n                        ...prevState,\n                        oppState: opponentBoard,\n                    }\n                },\n                () => {\n                    console.log('move received')\n                    if (this.state.oppState.completed) console.log('game lost')\n                },\n            )\n        })\n\n        socket.on('player_disconnecting', () => {\n            this.setState((prevState) => ({\n                ...prevState,\n                oppReady: false,\n            }))\n        })\n\n        // playDsPopup('ds1')\n    }\n\n    /**\n     * Fill array with one value, then make sure it is random using map.\n     * Called in constructor.\n     *\n     * @param props determines the number of dice on the diceboard.\n     * @returns a default and random initial state for a diceboard.\n     */\n    defaultState({ noOfDice }: MainProps): MainState {\n        const myDiceBoard = {\n            dieStates: new Array<DieState>(noOfDice)\n                .fill({\n                    id: '',\n                    value: Math.ceil(Math.random() * 6),\n                    isFrozen: false,\n                })\n                .map((_) => ({\n                    id: nanoid(),\n                    value: Math.ceil(Math.random() * 6),\n                    isFrozen: false,\n                })),\n            completed: false,\n            rolling: false,\n        } as DiceBoardState\n\n        return {\n            diceBoard: myDiceBoard,\n            oppReady: false,\n            oppState: {\n                dieStates: [],\n                completed: false,\n                rolling: false,\n            },\n        }\n    }\n\n    /**\n     * Handle the freezing of the clicked die. Called each time die is clicked.\n     * Callback of setState ensures that the opponent is informed of the move made,\n     * and checks if game is won.\n     *\n     * @param e the click event which we need to avoid default behaviour.\n     * @param id of each die in order to select the one pressed.\n     */\n    handleFreeze(e: SyntheticEvent, id: string) {\n        e.preventDefault()\n        this.setState(\n            (prevState: MainState) => {\n                const newDieStates = prevState.diceBoard.dieStates.map(\n                    (dieState) =>\n                        id !== dieState.id\n                            ? dieState\n                            : {\n                                  ...dieState,\n                                  isFrozen: !dieState.isFrozen,\n                              },\n                )\n                const newState = {\n                    ...prevState,\n                    diceBoard: {\n                        ...prevState.diceBoard,\n                        dieStates: newDieStates,\n                    },\n                }\n                return newState\n            },\n            () => {\n                this.props.socket.emit('send_move', this.state.diceBoard)\n                this.checkDone()\n            },\n        )\n    }\n\n    /**\n     * Called after every time a die is frozen.\n     * Checks that all dice are frozen and have the same value.\n     *\n     * If completed, update state and send move to opponent.\n     * @todo send a unique message stating that game is won.\n     */\n    checkDone() {\n        const completed = this.state.diceBoard.dieStates.every(\n            (dieState) =>\n                dieState.isFrozen &&\n                this.state.diceBoard.dieStates[0].value === dieState.value,\n        )\n\n        if (completed)\n            this.setState(\n                (prevState) => ({\n                    ...prevState,\n                    diceBoard: {\n                        ...prevState.diceBoard,\n                        completed: true,\n                    },\n                }),\n                () => this.props.socket.emit('send_move', this.state.diceBoard),\n            )\n    }\n\n    /**\n     * Called every time the Roll Button is clicked.\n     * For each unfrozen die, assign it a new value, and set the diceboard to be rolling.\n     */\n    handleRoll() {\n        /**\n         * @callback anonymous send move to opponent.\n         */\n        this.setState(\n            (prevState: MainState) => ({\n                ...prevState,\n                diceBoard: {\n                    ...prevState.diceBoard,\n                    dieStates: prevState.diceBoard.dieStates.map((dieState) =>\n                        dieState.isFrozen\n                            ? dieState\n                            : {\n                                  ...dieState,\n                                  // TODO: fix number generation when dice spin\n                                  value: Math.ceil(Math.random() * 6),\n                              },\n                    ),\n                    rolling: true,\n                },\n            }),\n            () => {\n                this.props.socket.emit('send_move', this.state.diceBoard)\n\n                console.log(\n                    `button pressed. Dice rolling: ${this.state.diceBoard.rolling}`,\n                )\n            },\n        )\n    }\n\n    /**\n     * Called every time the roll animation ends.\n     * Set the diceboard rolling to false.\n     */\n    handleAnimationEnd() {\n        this.setState(\n            (prevState) => ({\n                ...prevState,\n                diceBoard: {\n                    ...prevState.diceBoard,\n                    rolling: false,\n                },\n            }),\n            () => {\n                console.log(\n                    `animation ended. Dice rolling: ${this.state.diceBoard.rolling}`,\n                )\n            },\n        )\n    }\n\n    /**\n     * Called when the game is over and the Roll Button (in a different state is clicked).\n     */\n    reset() {\n        this.setState(this.defaultState(this.props))\n    }\n\n    /**\n     * Create the layout of main.\n     * It contains some header text, two diceboards, and a button to roll the dice.\n     *\n     * @returns the  layout of the Main Element.\n     */\n    render() {\n        const {\n            dieStates: myDieStates,\n            completed: myGameFinished,\n            rolling,\n        } = this.state.diceBoard\n        const { dieStates: oppDieStates, completed: oppGameFinished } =\n            this.state.oppState\n        const { oppReady } = this.state\n\n        const lossPopup =\n            !myGameFinished && oppGameFinished ? (\n                <dialog\n                    open={true}\n                    onAnimationEnd={(e) => {\n                        const dialog = e.currentTarget\n                        dialog.removeAttribute('open')\n                    }}\n                    className=\"you-lost-popup\"\n                >\n                    <h1>YOU LOST</h1>\n                </dialog>\n            ) : (\n                <></>\n            )\n\n        const gameButton = (\n            <button\n                className={`cool-button drop-shadow text-white ${\n                    oppReady ? '' : 'opacity-50 cursor-not-allowed min-w-fit'\n                }`}\n                onClick={\n                    oppReady\n                        ? myGameFinished || oppGameFinished\n                            ? this.reset\n                            : this.handleRoll\n                        : () => {}\n                }\n            >\n                {myGameFinished || oppGameFinished ? 'Start Again' : 'Roll'}\n            </button>\n        )\n\n        return (\n            <div className=\"main\">\n                {myGameFinished && !oppGameFinished && <Confetti />}\n                {lossPopup}\n                <h1 className=\"title\">Tenzies</h1>\n                <p className=\"desc\">\n                    Roll until all dice are the same. Click each die to freeze\n                    it at its current value between rolls.\n                </p>\n                <p className=\"desc\">Try to finish before your opponent!</p>\n                <div className=\"dice-boards\">\n                    <div className=\"player-board\">\n                        <h2 className=\"player-header\">My Board</h2>\n                        <DiceBoard\n                            ready={oppReady}\n                            opponent={false}\n                            rolling={rolling}\n                            dieStates={myDieStates}\n                            handleFreeze={this.handleFreeze}\n                            handleAnimationEnd={this.handleAnimationEnd}\n                        />\n                    </div>\n                    <div className=\"player-board\">\n                        <h2 className=\"player-header opponent\">\n                            Opponent's Board\n                        </h2>\n                        {oppReady ? (\n                            <DiceBoard\n                                ready={oppReady}\n                                opponent={true}\n                                rolling={false}\n                                dieStates={oppDieStates}\n                                handleFreeze={this.handleFreeze}\n                                handleAnimationEnd={this.handleAnimationEnd}\n                            />\n                        ) : (\n                            <div className=\"m-auto pt-4\">\n                                <p className=\"opacity-50\">\n                                    Waiting on Opponent\n                                </p>\n                                <Loader />\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {gameButton}\n            </div>\n        )\n    }\n}\n","export default function Anchor(props: any) {\n    return <a target=\"_blank\" rel=\"noreferrer\" {...props}></a>\n}\n","import '../style/footer.css'\nimport Anchor from './Anchor'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nlibrary.add(fab)\n\nexport default function Footer() {\n    return (\n        <footer>\n            <p style={{ textAlign: 'center' }}>Developer Contact Info</p>\n            <ul className=\"social-info\" style={{ listStyle: 'none' }}>\n                <li>\n                    <Anchor href=\"https://www.facebook.com/amar.mesic.100\">\n                        <FontAwesomeIcon icon={['fab', 'facebook']} />\n                    </Anchor>\n                </li>\n                <li>\n                    <Anchor href=\"#\">\n                        <FontAwesomeIcon icon={['fab', 'instagram']} />\n                    </Anchor>\n                </li>\n                <li>\n                    <Anchor href=\"https://github.com/amar-mesic\">\n                        <FontAwesomeIcon icon={['fab', 'github']} />\n                    </Anchor>\n                </li>\n                <li>\n                    <Anchor href=\"https://stackoverflow.com/users/14022782/amar-mesic\">\n                        <FontAwesomeIcon icon={['fab', 'stack-overflow']} />\n                    </Anchor>\n                </li>\n            </ul>\n            <hr />\n            <p className=\"copyright\">Retto Inc. © 2018</p>\n        </footer>\n    )\n}\n","import './App.css'\nimport Main from './components/Main'\nimport io from 'socket.io-client'\nimport { useEffect } from 'react'\nimport Footer from './components/Footer'\n\nconst NO_OF_DICE = 10\n/**\n * Handle as much of the socket logic in the app as possible.\n * Due to the need to communicate state, some of the socket work is done in Main.\n */\nconst socket =\n    process.env.NODE_ENV === 'production' ? io() : io('http://127.0.0.1:3001')\n\nfunction App() {\n    /**\n     * Run effectful code only once after rendering, since dependency array is empty.\n     * Add socket handlings for the different events.\n     */\n    useEffect(() => {\n        socket.on('connect', () => {\n            console.log('connected')\n        })\n\n        socket.on('first_player', () => {\n            // an event was received from the server\n            console.log('I am the first player!')\n        })\n\n        // upon disconnection\n        socket.on('disconnect', (reason) => {\n            console.log(`disconnected due to ${reason}`)\n        })\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <section className=\"my-container\">\n                <Main noOfDice={NO_OF_DICE} socket={socket} />\n            </section>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport 'normalize.css'\nimport './index.css'\nimport './style/tailwind.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!)\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}